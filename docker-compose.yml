version: '3.8'

services:
  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: bt_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: betthink
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: bt_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bt_api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/betthink?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Auth0 - Replace with your values
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_ISSUER: ${AUTH0_ISSUER}
      # API Keys - Replace with your values
      UNABATED_API_KEY: ${UNABATED_API_KEY}
      THE_ODDS_API_KEY: ${THE_ODDS_API_KEY}
      EXPO_ACCESS_TOKEN: ${EXPO_ACCESS_TOKEN}
      # Logging
      LOG_LEVEL: debug
      LOG_PRETTY_PRINT: "true"
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npm run start:prod
      "
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Jaeger (Optional - for OpenTelemetry tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: bt_jaeger
    ports:
      - "6831:6831/udp"  # Accept jaeger.thrift over compact thrift protocol
      - "16686:16686"    # Jaeger UI
      - "14268:14268"    # Accept jaeger.thrift directly from clients
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"

volumes:
  postgres_data:
  redis_data:
